class disjointSet
{
	vector<int> parent, size;
public:
	disjointSet(int N)
	{
		parent.resize(N + 1);
		size.resize(N + 1);
		for(int i = 0; i <= N; ++i)
		{
			parent[i] = i;
			size[i] = 1;
		}
	}

	// Find's Representative (Ultimate Parent Node)
	int findRep(int i)
	{
		if(parent[i] == i)
			return i;
		return parent[i] = findRep(parent[i]);
	}

	void unite(int a, int b)
	{
		int rep_a = findRep(a);
		int rep_b = findRep(b);
		if(rep_a == rep_b)
			return;

		if(size[rep_a] < size[rep_b])
		{
			parent[rep_a] = parent[rep_b];
			size[rep_b] += size[rep_a];
		}
		else
		{
			parent[rep_b] = parent[rep_a];
			size[rep_a] += size[rep_b];
		}
	}

	bool query(int a, int b)
	{
		int rep_a = findRep(a);
		int rep_b = findRep(b);

		return (rep_a == rep_b);
	}
	
	int sizeOfCircle(int a)
	{
		int rep = findRep(a);
		return size[rep];
	}
};